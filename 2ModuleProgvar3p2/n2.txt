////#2
////Создать линейный однонаправленный список из вещественных чисел.
////Вставить в список число 1.5 после каждого элемента с отрицательным
////значением.
#include <iostream>
using namespace std;
struct Node {
    int d;
    Node* p;
};
Node* first(int d);
void push(Node** top, int d);
int pop(Node** top);
int marker = 0;
int main() {
    srand(time(0));
    setlocale(0, "RUS");
    Node* top = NULL;
    top = first(1);
    int mass[20] = {};
    for (int i = 0; i < 20; i++) {
        mass[i] = rand() % 30-10;
    }
    for (int i = 1; i < 20; i++)push(&top, mass[i]);
    cout << '\n';
    while (top)
    {
        /*cout << pop(&top) << ' ';*/
        pop(&top);
    }
    cout << '\n';
}
Node* first(int d) {
    Node* pv = new Node;
    pv->d = 18;
    pv->p = 0;
    cout << pv->d << ' ';
    return pv;
}


void push(Node** top, int d) {
    Node* pv = new Node;
    pv->d = d;
    pv->p = *top;
    *top = pv;
    cout << (*top)->d << ' ';
}

int pop(Node** top) {
    int temp = (*top)->d;
    if (temp < 0) {
        Node* pv = *top;
        (*top) = (*top)->p;
        delete pv;
        cout << temp << ' ';
        cout << 1.5 << ' ';
        return 0;
    }
    else {
        Node* pv = *top;
        (*top) = (*top)->p;
        delete pv;
        cout << temp << ' ';
        return temp;
    }
}



















//#2
//Создать линейный однонаправленный список из вещественных чисел.
//Вставить в список число 1.5 после каждого элемента с отрицательным
//значением.
#include <iostream>
#include <list>
using namespace std;
int main()
{
    setlocale(0, "RUS");
    std::list <float> list;
    for (int i = 0; i < 20; i++) {
        int number = rand() % 50 - 30;
        if (number >= 0)
            list.push_back(number);
        else {
            list.push_back(number);
            list.push_back(1.5);
        }
    }
    while (!list.empty()) {
        cout << list.front() << " ";
        list.pop_front();
    }
}
////#2
////Создать линейный однонаправленный список из вещественных чисел.
////Вставить в список число 1.5 после каждого элемента с отрицательным
////значением.
//#include <iostream>
//#include <list>
//using namespace std;
//int main()
//{
//    setlocale(0, "RUS");
//    std::list <float> list;
//    for (int i = 0; i < 20; i++) {
//        int number = rand() % 50 - 30;
//        if (number >= 0)
//            list.push_back(number);
//        else {
//            list.push_back(number);
//            list.push_back(1.5);
//        }
//    }
//    while (!list.empty()) {
//        cout << list.front() << " ";
//        list.pop_front();
//    }
//}


#include <iostream>
using namespace std;
struct Node {
    int d;
    Node* p;
};
Node* first(int d);
void push(Node** top, int d);
int pop(Node** top);
int marker = 0;
int main() {
    srand(time(0));
    setlocale(0, "RUS");
    Node* top = NULL;
    top = first(1);
    int mass[20] = {};
    for (int i = 0; i < 20; i++) {
        mass[i] = rand() % 30-10;
    }
    for (int i = 1; i < 20; i++)push(&top, mass[i]);
    cout << '\n';
    while (top)
    {
        /*cout << pop(&top) << ' ';*/
        pop(&top);
    }
    cout << '\n';
}
Node* first(int d) {
    Node* pv = new Node;
    pv->d = 18;
    pv->p = 0;
    cout << pv->d << ' ';
    return pv;
}


void push(Node** top, int d) {
    Node* pv = new Node;
    pv->d = d;
    pv->p = *top;
    *top = pv;
    cout << (*top)->d << ' ';
}

int pop(Node** top) {
    int temp = (*top)->d;
    if (temp < 0) {
        Node* pv = *top;
        (*top) = (*top)->p;
        delete pv;
        cout << temp << ' ';
        cout << 1.5 << ' ';
        return 0;
    }
    else {
        Node* pv = *top;
        (*top) = (*top)->p;
        delete pv;
        cout << temp << ' ';
        return temp;
    }
}
